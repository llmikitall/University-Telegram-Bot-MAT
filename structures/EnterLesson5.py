from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram import F

from StatusFilter import StatusFilter
from MessageLog import MessageInConsole
from sql.UpdateUserInformation import UpdateAny
from sql.SearchUserInformation import SearchAny
from aiogram import Router
from AnyMiddleware import AnyMiddleware

import sqlite3

router = Router()
router.message.middleware(AnyMiddleware())


@router.message(F.text.contains("–ù–∞–∑–∞–¥"), StatusFilter("5"))
async def InputBack(message: Message):
    MessageInConsole(message)
    from structures.Menu1 import Output1
    await Output1(message)


@router.message(F.text.contains("–û–±–Ω—É–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤—ã"), StatusFilter("5"))
async def InputBack(message: Message):
    MessageInConsole(message)
    UpdateAny(message.chat.id, "userOfSetting", "groupings", "?")
    await message.answer("–í–∞—à–∏ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤—ã –±—ã–ª–∏ –æ–±–Ω—É–ª–µ–Ω—ã.")
    await Output5(message)


@router.message(F.text, StatusFilter("5"))
async def Input5(message: Message):
    MessageInConsole(message)
    group = SearchAny(message.chat.id, "userOfSetting", "class")
    List = elcList(group)
    if message.text in List:
        from structures.EnterGrouping6 import Output6
        await Output6(message)
        return
    await message.answer("–ù–µ-–Ω–µ-–Ω–µ... –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")


async def Output5(message: Message):
    emojiList = list()
    userID = message.chat.id
    emojiID = int(SearchAny(userID, "userOfSetting", "emojiID"))
    emojiList.append(('', 'üîô ', '‚Ü™Ô∏è ')[emojiID])
    emojiList.append(('', '‚úñÔ∏è', '‚úñÔ∏è')[emojiID])

    group = SearchAny(message.chat.id, "userOfSetting", "class")
    List = elcList(group)
    kb = [[KeyboardButton(text=f"{emojiList[0]}–ù–∞–∑–∞–¥")]]
    for i in range(len(List)):
        kb.append([KeyboardButton(text=f"{List[i]}")])
    kb.append([KeyboardButton(text=f"{emojiList[1]}–û–±–Ω—É–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤—ã{emojiList[1]}")])
    groupings = SearchAny(message.chat.id, "userOfSetting", "groupings")


    if SearchAny(userID, "historySetting", "status5") == '0':
        sep = "-------------------------------------------------------\n"
        text = ("   [<b>–í—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–∞</b>]\n   –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è <u>–≤—Å–µ</u> —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤—ã <i>–í–∞—à–µ–π</i>"
                " <u>–≥—Ä—É–ø–ø—ã</u>. –í—ã–±–∏—Ä–∞–µ—Ç–µ <i>–í–∞—à–∏</i> —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ <i>–í—ã</i> <b>–≤—ã–±–∏—Ä–∞–ª–∏ –Ω–∞ "
                "—Å–∞–π—Ç–µ: iot.sevsu.ru/electives</b>. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–æ–º–µ—Ä <i>–í–∞—à–µ–π</i> –≥—Ä—É–ø–ø—ã <i>–í–∞—à–µ–≥–æ</i> "
                "—Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–∞. –ê–ª–≥–æ—Ä–∏—Ç–º –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ <i>–í–∞—à–∏</i> —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤—ã, <b>—Å–∫—Ä—ã–≤–∞—è –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ</b>."
                "\n   <b>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!</b>\n")
        await message.answer(sep + text + sep)
        stickerList = ("CAACAgIAAxkBAAEIhnhm6Cva-pfDCe4YbqnD_s2qbVl_bgACGAADwDZPE9b6J7-cahj4NgQ",
                       "CAACAgIAAxkBAAEJq69nJQotLtbMZ0EeLsLGkITvOcjkCwAC1gYAAut-2Uiz43Y2AAEsGQY2BA",
                       "CAACAgIAAxkBAAEIhnhm6Cva-pfDCe4YbqnD_s2qbVl_bgACGAADwDZPE9b6J7-cahj4NgQ")
        await message.answer_sticker(stickerList[emojiID])
        UpdateAny(userID, "historySetting", "status5", "1")
    text = "<i>–í–∞—à —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–æ–≤:</i>"
    if groupings == '?':
        text = "<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–∞.</b>"
    else:
        groupings = groupings.split("\n")
        for i in range(len(groupings)):
            text = f"{text}\n   - <b>[{groupings[i]}]</b>"

    placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
    Keys = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder=placeholder)
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–∞.\n{text}", reply_markup=Keys)
    UpdateAny(message.chat.id, "userOfSetting", "status", "5")


def elcList(group) -> list:
    con = sqlite3.connect("sql/db/schedule.db")
    cur = con.cursor()
    cur.execute(f'SELECT * FROM groupList WHERE class = "{group}"')
    firstList = cur.fetchall()
    secondList = []
    for i in range(len(firstList)):
        if not (firstList[i][3] in secondList) and firstList[i][3] != '-':
            secondList.append(firstList[i][3])
    secondList.sort()
    return secondList

