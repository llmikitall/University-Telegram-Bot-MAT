import time
import datetime

from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F, types

from AnyMiddleware import AnyMiddleware
from sql.UpdateUserInformation import UpdateAny
from sql.SearchUserInformation import SearchAny
from sql.ScheduleReader import OutputSQL
from StatusFilter import StatusFilter
from MessageLog import MessageInConsole, LogInConsole
from aiogram import Router

router = Router()
router.message.middleware(AnyMiddleware())


@router.message(F.text.contains("–ù–∞–∑–∞–¥"), StatusFilter("2"))
async def InputBack(message: Message):
    MessageInConsole(message)
    from structures.Menu1 import Output1
    await Output1(message)


@router.message(F.text, StatusFilter("2"))
async def InputDay(message: Message):
    MessageInConsole(message)
    # –ü—Ä–∏—ë–º –¥–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç ReaderSQL
    WeekDays = ListOfDays(message)
    Keys = [[InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë", callback_data="showAll"),
             InlineKeyboardButton(text="–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞", callback_data="abbreviation")]]
    InlineKeys = InlineKeyboardMarkup(inline_keyboard=Keys)
    if any(text in message.text for text in WeekDays):
        day = 86400
        today = time.time()
        factor = 0
        if WeekDays[1] in message.text:
            factor = 1
        elif WeekDays[2] in message.text:
            factor = 2
        elif WeekDays[3] in message.text:
            factor = 3
        elif WeekDays[4] in message.text:
            factor = 4
        elif WeekDays[5] in message.text:
            factor = 5
        if datetime.date.today().weekday() + factor > 5:
            factor = factor + 1
        today = today + day * factor
        strToday = datetime.datetime.fromtimestamp(today).strftime('%d.%m.%Y')
        try:
            text = OutputSQL(message, strToday, 0)
            await message.answer(text, reply_markup=InlineKeys)
            await Output2(message)
        except TelegramBadRequest:
            print(f"               [<]: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ!")
            final = text.split("-------------------------------------\n")
            separator = "-------------------------------------\n"
            output = ""
            for i in range(len(final) - 1):
                print(f"{i} - {len(final)}) {final[i]}")
                if len(output + final[i] + separator) < 4000 and i != len(final) - 2:
                    output = output + final[i] + separator
                    continue
                if i == len(final) - 2:
                    output = output + final[i] + separator
                print(f"{len(output + final[i] + separator)}")
                await message.answer(output)
                output = separator + final[i] + separator
        return
    else:
        try:
            today = datetime.datetime.strptime(message.text, "%d.%m.%Y")
            strToday = today.strftime("%d.%m.%Y")
            await message.answer(OutputSQL(message, strToday, 0), reply_markup=InlineKeys)
        except ValueError:
            await message.answer(f"–ù–µ... –Ø –ø–ª–æ—Ö–æ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç, –Ω–æ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π: [01.09.2024]")
    await Output2(message)


@router.callback_query()
async def callbackHandler(callback: types.CallbackQuery):
    LogInConsole(f"[{callback.message.chat.id}] {callback.data}")
    if callback.data == "showAll":
        Keys = [[InlineKeyboardButton(text="–°–∫—Ä—ã—Ç—å –≤–Ω–æ–≤—å", callback_data="hideAgain"),
                 InlineKeyboardButton(text="–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞", callback_data="abbreviation")]]
        InlineKeys = InlineKeyboardMarkup(inline_keyboard=Keys)
        date = callback.message.text.split("\n", 3)
        text = OutputSQL(callback.message, date[2][14:-1], 1)
        try:
            await callback.message.answer(text, reply_markup=InlineKeys)
        except TelegramBadRequest:
            print(f"               [<]: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ!")
            final = text.split("-------------------------------------\n")
            separator = "-------------------------------------\n"
            output = ""

            for i in range(len(final)-1):
                print(f"{i} - {len(final)}) {final[i]}")

                if len(output + final[i] + separator) < 4000 and i != len(final)-2:
                    output = output + final[i] + separator
                    continue
                if i == len(final)-2:
                    output = output + final[i] + separator
                print(f"{len(output + final[i] + separator)}")
                await callback.message.answer(output)
                output = separator + final[i] + separator
    elif callback.data == "abbreviation":
        Keys = [[InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data="delete")]]
        InlineKeys = InlineKeyboardMarkup(inline_keyboard=Keys)
        text = ("<b>–ü–∞–º—è—Ç–∫–∞</b>\n"
                "-------------------------------------\n"
                "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–∞\n"
                "-------------------------------------\n"
                "<b>(I)</b> - —É–ª. –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è, 33\n"
                "<b>(II)</b> - —É–ª. –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è, 31\n"
                "<b>(IV)</b> -	—É–ª. –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∞—è, 28\n"
                "<b>(V)</b> - —É–ª. –ì–æ–≥–æ–ª—è, 14\n"
                "<b>(VI)</b> - —É–ª. –ì–æ–≥–æ–ª—è, 23\n"
                "<b>(VII)</b> - —É–ª. –ö—É—Ä—á–∞—Ç–æ–≤–∞, 7\n"
                "<b>(VIII)</b> - —É–ª. –ö—É—Ä—á–∞—Ç–æ–≤–∞, 7\n"
                "<b>(IX)</b> - —É–ª. –ö—É—Ä—á–∞—Ç–æ–≤–∞, 7\n"
                "<b>(XII)</b> - —É–ª. –†–µ–ø–∏–Ω–∞, 3\n"
                "-------------------------------------\n"
                "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–∏–ø –ø–∞—Ä\n"
                "-------------------------------------\n"
                "<b>[–î]</b> - –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
                "<b>[–õ–ó]</b> - –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ\n"
                "<b>[–ü–ó]</b> - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ\n"
                "<b>[–õ]</b> - –õ–µ–∫—Ü–∏—è\n"
                "-------------------------------------\n"
                "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —á–µ–≥–æ-—Ç–æ...\n"
                "-------------------------------------\n"
                "<b>(–£–¢–¶)</b> - –£—á–µ–±–Ω–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä\n")
        await callback.message.answer(text, reply_markup=InlineKeys)
    elif callback.data == "hideAgain":
        Keys = [[InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë", callback_data="showAll"),
                 InlineKeyboardButton(text="–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞", callback_data="abbreviation")]]
        InlineKeys = InlineKeyboardMarkup(inline_keyboard=Keys)
        date = callback.message.text.split("\n", 3)
        await callback.message.answer(OutputSQL(callback.message, date[2][14:-1], 0), reply_markup=InlineKeys)
    elif callback.data == "delete":
        await callback.message.delete()
    await callback.answer()


async def Output2(message: Message):
    ListOfDays(message)
    userID = message.chat.id
    emojiID = int(SearchAny(userID, "userOfSetting", "emojiID"))
    emojiList = list()
    emojiList.append(('', '‚ûñ', 'üîπ')[emojiID])
    emojiList.append(('', '', 'üîπ')[emojiID])
    emojiList.append(('', '‚úñÔ∏è', '‚≠ï')[emojiID])
    emojiList.append(('', '‚ûï', 'üîò')[emojiID])
    emojiList.append(('', 'üîô ', '‚Ü™Ô∏è ')[emojiID])
    WeekDays = ListOfDays(message)
    if SearchAny(userID, "historySetting", "status2") == '0':
        sep = "-------------------------------------------------------\n"
        text = ("   [<b>–í—ã–±–æ—Ä –¥–Ω—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>]\n   –ó–¥–µ—Å—å <i>–í—ã</i> –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å <b>6-—Å—Ç—å "
                "–¥–Ω–µ–π –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>. –û–¥–Ω–∞–∫–æ –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å <b>–ª—é–±–æ–π –¥–µ–Ω—å</b>, "
                "–¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ <u>–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–∞—Ç—É</u> –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –í–∞—Å –¥–Ω—è: <i>17.09.2024</i>.\n"
                "   –ü–æ-–ø—Ä–µ–∂–Ω–µ–º—É, –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –Ω–µ–π –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏: <b>\"–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë\"</b>"
                " –∏ <b>\"–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞\"</b>.\n     <i>1-–∞—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–∫—Ä—ã—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ø–∞—Ä—ã</i>. "
                "–ü–æ—Å–ª–µ –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ <b>\"–°–∫—Ä—ã—Ç—å –≤—Å—ë\"</b>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n"
                "     <i>2-–∞—è - —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–∫—Ä—ã—Ç—ã–π —Å–º—ã—Å–ª —Ä–∏–º—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–æ–º–µ—Ä–∞—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤</i>."
                "\n   <b><u>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–Ω–æ–π –∏–Ω–æ–≥–¥–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ —Å–∞–π—Ç–µ "
                "timetable.sevsu.ru, –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫!!</u></b>\n")
        await message.answer(sep + text + sep)
        stickerList = ("CAACAgIAAxkBAAEIhnhm6Cva-pfDCe4YbqnD_s2qbVl_bgACGAADwDZPE9b6J7-cahj4NgQ",
                       "CAACAgIAAxkBAAEJq69nJQotLtbMZ0EeLsLGkITvOcjkCwAC1gYAAut-2Uiz43Y2AAEsGQY2BA",
                       "CAACAgIAAxkBAAEIhnhm6Cva-pfDCe4YbqnD_s2qbVl_bgACGAADwDZPE9b6J7-cahj4NgQ")
        await message.answer_sticker(stickerList[emojiID])
        UpdateAny(userID, "historySetting", "status2", "1")

    kb = [
        [KeyboardButton(text=f"{emojiList[2]} {WeekDays[0]} {emojiList[2]}"),
         KeyboardButton(text=f"{emojiList[3]} {WeekDays[1]} {emojiList[3]}")],
        [KeyboardButton(text=f"{emojiList[0]}{WeekDays[2]}{emojiList[1]}"),
         KeyboardButton(text=f"{emojiList[0]}{WeekDays[3]}{emojiList[1]}")],
        [KeyboardButton(text=f"{emojiList[0]}{WeekDays[4]}{emojiList[1]}"),
         KeyboardButton(text=f"{emojiList[0]}{WeekDays[5]}{emojiList[1]}")],
        [KeyboardButton(text=f"{emojiList[4]}–ù–∞–∑–∞–¥")]
    ]
    placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:"
    Keys = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder=placeholder)
    await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:", reply_markup=Keys)
    UpdateAny(userID, "userOfSetting", "status", "2")


def ListOfDays(message: Message):
    # Today - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è. Day - —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–¥–Ω–æ–º –¥–Ω–µ. Week - —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.
    today = time.time()
    day = 86400
    week = datetime.datetime.fromtimestamp(time.time()).weekday()
    # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∫–∞–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
    todayWeek = datetime.date.today().weekday()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π.
    formatDate = int(SearchAny(message.chat.id, "userOfSetting", "formatDate"))
    formatToday = SearchAny(message.chat.id, "userOfSetting", "formatToday")
    WeekDays = list()
    for i in range(7):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ. (–ú—ã –∏—Å–∫–ª—é—á–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        if week >= 6:
            # + –î–µ–Ω—å * ((–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ || –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ + 1) - 5), –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ –¥–Ω–µ–π, —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ.
            today = today + day * (week - 5)
            week = 0
        # –î–µ–Ω—å –∏ –º–µ—Å—è—Ü –¥–Ω—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ—à–ª–∞ –æ—á–µ—Ä–µ–¥—å.
        TimeToday = datetime.datetime.fromtimestamp(today).strftime("%d.%m")
        # –°–æ–∑–¥–∞—ë—Ç—Å—è –º–∞—Å—Å–∏–≤. (0 - —Ç–∏–ø –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ‚Ññ1, 1 - —Ç–∏–ø –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ‚Ññ2)
        if (week != 6) and (week == todayWeek) and formatToday == '1':
            WeekDays.append("–°–µ–≥–æ–¥–Ω—è")
        elif week == todayWeek + 1 and formatToday == '1' or todayWeek == 6 and week == 0:
            WeekDays.append("–ó–∞–≤—Ç—Ä–∞")
        elif week == 0:
            WeekDays.append(('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', f'–ü–ù. {TimeToday}')[formatDate])  # [todayList]
        elif week == 1:
            WeekDays.append(('–í—Ç–æ—Ä–Ω–∏–∫', f'–í–¢. {TimeToday}')[formatDate])
        elif week == 2:
            WeekDays.append(('–°—Ä–µ–¥–∞', f'–°–†. {TimeToday}')[formatDate])
        elif week == 3:
            WeekDays.append(('–ß–µ—Ç–≤–µ—Ä–≥', f'–ß–¢. {TimeToday}')[formatDate])
        elif week == 4:
            WeekDays.append(('–ü—è—Ç–Ω–∏—Ü–∞', f'–ü–¢. {TimeToday}')[formatDate])
        elif week == 5:
            WeekDays.append(('–°—É–±–±–æ—Ç–∞', f'–°–ë. {TimeToday}')[formatDate])
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞.

        week = week + 1
        today = today + day
    return WeekDays
